// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/3/a/RAM8.hdl
/**
 * Memory of eight 16-bit registers.
 * If load is asserted, the value of the register selected by
 * address is set to in; Otherwise, the value does not change.
 * The value of the selected register is emitted by out.
 */
CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    //Flow:
    /**
     * The DMux receives the load signal and address. It sends load=1 to exactly one register and load=0 to the others.
     * Each Register compares its load signal:
     * If load=1, it updates its value with in
     * If load=0, it keeps its current value
     * The Mux receives outputs from all Registers and the address.
     * It selects the output from the register indicated by address.
     * The selected register's output becomes the overall out of RAM8.
    */

    PARTS:
    // Distributes load to a register based on input
    DMux8Way(in=load, sel=address, a=l0, b=l1, c=l2, d=l3, e=l4, f=l5, g=l6, h=l7);
    // All store a 16 bit value
    Register(in=in, load=l0, out=o0);
    Register(in=in, load=l1, out=o1);
    Register(in=in, load=l2, out=o2);
    Register(in=in, load=l3, out=o3);
    Register(in=in, load=l4, out=o4);
    Register(in=in, load=l5, out=o5);
    Register(in=in, load=l6, out=o6);
    Register(in=in, load=l7, out=o7);
    // Selects output from one of 8 registers based on address input
    Mux8Way16(a=o0, b=o1, c=o2, d=o3, e=o4, f=o5, g=o6, h=o7, sel=address, out=out);
}