// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    // zx
    // mux zeros input when b=0 (behaves like a switch)
    Mux16(a=x, b=false, sel=zx, out=zero_x);
    // nx
    // negate the mux input
    Not16(in=zero_x, out=not_x);
    // mux again to combine zeroed and negated with the original inputs.
    Mux16(a=zero_x, b=not_x, sel=nx, out=input_x);
    // zy
    // same as above for y
    Mux16(a=y, b=false, sel=zy, out=zero_y);
    // ny
    Not16(in=zero_y, out=not_y);
    Mux16(a=zero_y, b=not_y, sel=ny, out=input_y);
    // f determines whether we perform a sum (Add16) or bitwise and (And16)
    // so we calculate both those values then use f to choose between them
    Add16(a=input_x, b=input_y, out=add_xy);
    And16(a=input_x, b=input_y, out=and_xy);
    Mux16(a=and_xy, b=add_xy, sel=f, out=f_xy);
    // no
    // apply negation to the result based on no value, again, calculate both values
    // and choose between them with mux based on no value
    Not16(in=f_xy, out=not_f_xy);
    Mux16(a=f_xy, b=not_f_xy, sel=no, out=out, out[0..7] = pzr1, out[8..15] = pzr2, out[15] = ng);
    // zr
    // check if least significant bits are all zero
    // pzr stands for "partial zero result". 
    // It refers to the lower 8 bits of the ALU's output before the sign bit is applied.
    // pzr1 contains the least significant byte (bits 0-7) of the result
    // pzr2 contains the next byte (bits 8-15) of the result
    Or8Way(in=pzr1, out=zr1);
    Or8Way(in=pzr2, out=zr2);
    Or(a=zr1, b=zr2, out=notzr);
    Not(in=notzr, out=zr);
}